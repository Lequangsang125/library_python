# B·ªô b√†i t·∫≠p NumPy c∆° b·∫£n ‚Äì t·ªïng h·ª£p
# üìå Y√™u c·∫ßu: kh√¥ng d√πng v√≤ng l·∫∑p for n·∫øu c√≥ th·ªÉ, t·∫≠n d·ª•ng t√≠nh nƒÉng c·ªßa NumPy.

# 1. T·∫°o m·∫£ng v√† thao t√°c c∆° b·∫£n
# T·∫°o m·∫£ng 1D ch·ª©a c√°c s·ªë t·ª´ 10 ƒë·∫øn 50.

# T√¨m:

# Gi√° tr·ªã l·ªõn nh·∫•t, nh·ªè nh·∫•t.

# V·ªã tr√≠ (index) c·ªßa gi√° tr·ªã l·ªõn nh·∫•t.

import numpy as np

arr = np.arange(10,51)
print(arr)
print(arr.max())
x = arr.max()
arrmax = np.where(arr==x)
print("arrmax",arrmax)
print(arr.min())


# T·∫°o m·∫£ng 2D 3√ó4 ch·ª©a c√°c s·ªë nguy√™n ng·∫´u nhi√™n t·ª´ 0 ƒë·∫øn 100.
arr = np.random.randint(0,101,size=(3,4))
print(arr)
print(arr.max())
x = arr.max()
arrmax = np.where(arr==x)
print("arrmax",arrmax)
print(arr.min())






# 2. Indexing & slicing
# Cho m·∫£ng:

# python
# Sao ch√©p
# Ch·ªânh s·ª≠a
# arr = np.arange(1, 26).reshape(5, 5)
# L·∫•y h√†ng 2 (index = 1).

# L·∫•y c·ªôt cu·ªëi c√πng.

# L·∫•y sub-matrix g·ªìm c√°c ph·∫ßn t·ª≠:

# csharp
# Sao ch√©p
# Ch·ªânh s·ª≠a
# [7, 8]
# [12, 13]
# 3. Broadcasting
# T·∫°o m·∫£ng a = np.array([1, 2, 3]) v√† c·ªông v·ªõi s·ªë 10.

# T·∫°o m·∫£ng b shape (3, 3) ch·ª©a to√†n s·ªë 5, c·ªông a v√†o b.

# 4. Ufunc & to√°n h·ªçc
# Cho m·∫£ng:

# python
# Sao ch√©p
# Ch·ªânh s·ª≠a
# arr = np.linspace(0, np.pi, 5)
# T√≠nh sin(arr), cos(arr).

# T√≠nh t·ªïng c·ªßa sin^2 + cos^2 (ki·ªÉm tra ‚âà 1).

# 5. Mask & l·ªçc d·ªØ li·ªáu
# Cho m·∫£ng ng·∫´u nhi√™n 1D 20 ph·∫ßn t·ª≠ t·ª´ 0‚Äì50.

# L·ªçc ra c√°c gi√° tr·ªã > 25.

# G√°n c√°c gi√° tr·ªã < 10 th√†nh 0.

# 6. Thao t√°c h√¨nh d·∫°ng
# Cho m·∫£ng np.arange(12), ƒë·ªïi th√†nh shape (3, 4) r·ªìi ho√°n v·ªã h√†ng ‚Üî c·ªôt (transpose).

# 7. B√†i t·∫≠p t·ªïng h·ª£p
# Sinh m·∫£ng 6√ó6 ch·ª©a s·ªë nguy√™n ng·∫´u nhi√™n t·ª´ 1‚Äì20.

# T√≠nh t·ªïng t·ª´ng h√†ng.

# T√¨m h√†ng c√≥ t·ªïng l·ªõn nh·∫•t.

# Chu·∫©n h√≥a m·∫£ng (ƒë∆∞a v·ªÅ gi√° tr·ªã t·ª´ 0 ƒë·∫øn 1).